#!/bin/sh

## User config
UPSTREAM_SOURCE="srcdir"
## End of user config

_printhelp ()
{
    cat <<EOF
Usage: ${1##*/} [OPTIONS] PACKAGES

Default operation is to fetch source code for provided packages. Other
operations include:
  * Cleaning specified folder from build data.
  * Installing packages.

The script first look for exising folder containing a PKGBUILD file. If they are
not to be found, it will fetch the PKGBUILD from ABS-tree or yaourt, depending
on what is available.

Operations are cumulative, e.g. specifying the install operation while the
source folders are not available will automatically fetch the source code.

Options:

  -c:  Clean source folders from temp file (keep upstream source and built package).
  -f:  Force operation (overwrite, rebuild).
  -h:  Display this help.
  -i:  Install package (build if needed).

Example:
  ${1##*/} -cfi \$(pacman -Qmq)
    Rebuild, install and clean build folder for all foreign installed packages.
EOF
}

MAKEPKT_OPT=""

OPT_CLEAN=0
OPT_FORCE=0
OPT_INSTALL=0

while getopts ":cfhi" opt; do
    case $opt in
        c)
            MAKEPKG_OPT="$MAKEPKG_OPT -c"
            OPT_CLEAN=1 ;;
        f)
            MAKEPKG_OPT="$MAKEPKG_OPT -f"
            OPT_FORCE=1;;
        h)
            _printhelp "$0"
            exit 1 ;;
        i)
            OPT_INSTALL=1 ;;
        ?)
            _printhelp "$0"
            exit 1 ;;
        :)
            echo "Missing argument."
            _printhelp "$0"
            exit 1 ;;
    esac
done

shift $(($OPTIND - 1))

if [ $# -eq 0 ]; then
    echo "Missing argument."
    _printhelp "$0"
    exit 1
fi

if [ -z "$(command -v makepkg)"  ]; then
    echo "You need makepkg to run this script."
    exit 1
fi

HAS_ABS=0
HAS_YAOURT=0
[ -n "$(command -v abs)" ] && HAS_ABS=1
[ -n "$(command -v yaourt)" ] && HAS_YAOURT=1

if [ $HAS_ABS -eq 0 ] && [ $HAS_YAOURT -eq 0 ]; then
    echo "Please install either an ABS-tree or yaourt."
    exit 1
fi

if [ $HAS_ABS -eq 1 ] && [ -f "/etc/abs.conf" ]; then
    . "/etc/abs.conf"
    [ "$ABSROOT" = "" ] && ABSROOT="/var/abs/"
fi

################################################################################

absfetch ()
{
    pacman -Si $i >/dev/null 2>&1
    if [ $? -eq 0 ] && [ $HAS_ABS -eq 1 ] && [ -d "$ABSROOT" ]; then
        cp -r /var/abs/*/$i .
    else
        yaourt -G "$i" --noconfirm
    fi

    ## Return because $i does not exist.
    [ ! -d "$i" ] && return

    (cd "$i" && \
        mkdir -p "$UPSTREAM_SOURCE" && \
        SRCDEST="$UPSTREAM_SOURCE" makepkg -o)
}

for i ; do
    if [ ! -f "$i/PKGBUILD" ] || [ $OPT_FORCE -eq 1 ]; then
        absfetch "$i"
    fi
    if [ $OPT_INSTALL -eq 1 ]; then
        (cd "$i" && \
            mkdir -p "$UPSTREAM_SOURCE" && \
            SRCDEST="$UPSTREAM_SOURCE" makepkg -rs $MAKEPKG_OPT --nocheck --noconfirm)
    fi

    if [ $OPT_CLEAN -eq 1 ]; then
        (cd "$i" && echo "Removing src/ and pkg/ folders." && rm -rf "src" "pkg")
    fi
done

if [ $OPT_INSTALL -eq 1 ]; then
    echo "$@"
    sudo sh -c '
        (cd "$0" && pacman --noconfirm -U *.pkg.tar.xz)
        for i; do
            (cd "$i" && pacman --noconfirm -U *.pkg.tar.xz)
        done
' "$@"
fi
