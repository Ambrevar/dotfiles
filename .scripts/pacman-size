#!/bin/sh

_printhelp()
{
    cat <<EOF
Usage: ${1##*/} [OPTIONS] PACKAGES

Display package size. Output contains no double and is alphabetically sorted. A
grand total is printed at the end. It will only work for repos packages by
default.

  -h: Show this help.
  -n: Output is sorted by name.
  -q: Uses installed packages database instead of repos database. It speeds up
      queries and allows displaying size of local packages not available in
      repos.
  -s: Output is sorted by size.

EOF
}

CMD="pacman -Si"
TOTAL_SIZE=0
OPT_SORT="false"

while getopts ":hnqs" opt; do
    case $opt in
        h)
            _printhelp "$0"
            exit 1 ;;
        n)
            OPT_SORT="sort -uk3" ;;
        q)
            CMD="pacman -Qi" ;;
        s)
            OPT_SORT="sort -n" ;;
        ?)
            _printhelp "$0"
            exit 1 ;;
        :)
            echo "Missing argument."
            _printhelp "$0"
            exit 1 ;;
    esac
done

shift $(($OPTIND - 1))

if [ $# -eq 0 ]; then
    echo "Missing argument."
    _printhelp "$0"
    exit 1
fi

if [ -f "${0%/*}/.pacman-init" ];then
    . "${0%/*}/.pacman-init"
else
    echo "Missing init file" >&2 && exit 1
fi

if [ $(pacman -Qq "$@" 2>/dev/null | wc -l) -eq 0 ]; then
    echo "No valid package given." >&2
    exit
fi

## We use external variable for awk to fit current locales.  We use "eval" to be
## compatible with non-POSIX wordsplitting (e.g. zsh).
RESULT="$(${CMD} $@ | awk -F ": " -v filter="$pacman_size" -v pkg="$pacman_name" \
'$0 ~ pkg {pkgname=$2} $0 ~ filter {gsub(/[\.,].*/,"") ; printf("%6s KiB %s\n", $2, pkgname)}' | ($OPT_SORT || cat))"

## In the above version, we strip the decimals. This makes output lighter. The
## line below does not do it.
# '$0 ~ pkg {pkgname=$2} $0 ~ filter {printf("%13s %s\n", $2, pkgname)}'

echo "$RESULT"

## Print total size.
echo "$RESULT" | awk '{TOTAL=$1+TOTAL} END {printf("Total: %d KiB\n",TOTAL)}'


