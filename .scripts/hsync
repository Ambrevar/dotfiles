#!/bin/awk -f

function _printhelp() {
    print "Filesystem hierarchy synchronizer\n\
\n\
Usage: hsync SOURCE TARGET\n\
\n\
Preview how to move files in TARGET so that identical files found in SOURCE and\n\
TARGET have the same path in both folders. If duplicate files are found either\n\
in SOURCE or in TARGET, they are ignored as it is up to the user to decide what\n\
to do.\n\
\n\
Files are not actually moved, the command is printed to stdout. This way you can\n\
redirect to a file and preview the changes before actually processing them.\n\
\n\
You can also process the changes directly from command-line with some shell\n\
evaluation:\n\
  eval $(hsync SOURCE TARGET)"
}

function _info(s) {
    print "\n==> " s | "cat >&2"
    close("cat >&2")
}

function _msg(s) {
    print ":: " s | "cat >&2"
    close("cat >&2")
}

BEGIN {
    ## Both parameters must be existing folders.
    if (ARGC != 3 ||
        ("test -d " ARGV[1] " && test -d " ARGV[2] " || echo KO" | getline) > 0 )
    {
        _printhelp()
        exit
    }

    ## Array subindices
    dup=1

    _info("Scanning " ARGV[1] "...")
    while ( ("cd " ARGV[1] " && find . -type f -exec md5sum {} +" | getline ) > 0)
    {
        sum=$1
        ## We need to remove sum from line since filename may contain spaces.
        sub(/[^ ]+  /, "")

        if (source[sum])
        {
            _msg("Skipping duplicate: " $0)
            source[sum, dup]=1
            continue
        }
        source[sum]=$0
    }

    _info("Scanning " ARGV[2] "...")
    while ( ("cd " ARGV[2] " && find . -type f -exec md5sum {} +" | getline ) > 0)
    {
        sum=$1
        ## Skip if duplicate or not existant in source.
        if (source[sum, dup] || ! source[sum])
            continue

        sub(/[^ ]+  /, "")

        if (target[sum])
        {
            _msg("Skipping duplicate: " $0)
            target[sum, dup]=1
            continue
        }
        target[sum]=$0
    }

    _info("Hierarchy syncing preview of " ARGV[2] " based on " ARGV[1])
    for (i in target)
    {
        ## Some indices are compound, e.g. 'sum, dup'. We split the indices to
        ## check if they contain 'dup'.
        split(i, subi, SUBSEP)
        ## Conditions:
        ## - i is not compound.
        ## - i is not a duplicate.
        ## - i is different in target and source.
        if (subi[2] != dup && ! target[subi[1],dup] && source[subi[1]] != target[subi[1]])
        {
            dirname=source[subi[1]]
            sub(/[^/]+$/, "", dirname)

            ## Target -> Source
            change="'" ARGV[2] "/" target[subi[1]] "' '" ARGV[2] "/" source[subi[1]] "'"

            ## We only create a new folder if necessary.
            cmd="[ ! -d '" dirname "' ] && mkdir -p \"" ARGV[2] "/" dirname "\" && mv -nv " change

            ## We can sort preview by uncommenting the following pipe. This is
            ## not very useful however, and it costs some n*log(n) more
            ## operations.
            print cmd #|"sort"
        }
    }
}
